{{- # Functions

func string_format (format, args...)
    if !args
        ret format
    end
    
    $result = format

    $size = array.size args
    $i = -1
    while ++$i < $size
        $result = $result | string.replace ("{" + $i + "}") (args[$i])
    end
    
    ret $result
end


func array_create (start_index, count)
    if count < 0
        ret null
    end
    
    $result = []
    if count == 0
        ret $result
    end
    
    for $i in 0..(count - 1)
        $result[$i] = start_index + $i
    end
    
    ret $result
end

-}}


#nullable enable

{{- # Namespaces }}

{{- for $namespace in NamespaceDeclarations }}
    {{- if $namespace.Declaration }}
namespace {{ $namespace.Declaration }} {
    {{- end }}
{{ $namespace.UsingStatements }}
{{- end }}


{{- # Types }}

{{- for $typeDeclaration in TypeDeclarations }}
{{ $typeDeclaration.Declaration }} {
{{- end }}


{{- # Member declarations begin }}

    public enum Enum {
        {{- for $unionCase in Cases }}
        {{ $unionCase.Name }},
        {{- end }}
    } 
    
    
    {{- $constructorParameters = Parameters |
        array.each @(do
            ret string_format "{0} {1} = default!" $0.Type $0.FieldName
        end) |
        array.join ", " 
    }}
        
    private {{ Name }}(Enum Case, {{ $constructorParameters }}) {
        this.Case = Case;
        {{- for $parameter in Parameters }}
        this.{{ $parameter.FieldName }} = {{ $parameter.FieldName }};
        {{- end }}
    }
    
    public Enum Case { get; }
{{- for $parameter in Parameters }}
    private readonly {{ $parameter.Type }} {{ $parameter.FieldName }};
{{- end }}
    
{{- for $unionCase in Cases }}
    {{- $inputParameters = $unionCase.Parameters |
        array.each @(do
            ret string_format "{0} {1}" $0.Type $0.Name
        end) |
        array.join ", " }}
    {{- $outputParameters = $unionCase.Parameters |
        array.each @(do
            ret string_format "out {0} {1}" $0.Type $0.Name
        end) |
        array.join ", " }}
    {{- $constructorParameters = $unionCase.Parameters |
        array.each @(do
            ret string_format "{0}: {1}" $0.FieldName $0.Name
        end) |
        array.add ("Case: Enum." + $unionCase.Name) |
        array.join ", " }}
    
    public static partial {{ NameWithParameters }} {{ $unionCase.Name }}({{ $inputParameters }}) {
        return new {{ NameWithParameters }}({{ $constructorParameters }});
    }
    
    public bool Is{{ $unionCase.Name }} => this.Case == Enum.{{ $unionCase.Name }};
    
        {{- if (array.size $unionCase.Parameters) > 0 }}
    
    public bool TryGet{{ $unionCase.Name }}({{ $outputParameters }}) {
        {{- for $parameter in $unionCase.Parameters }}
        {{ $parameter.Name }} = this.{{ $parameter.FieldName }};
        {{- end }}
        return this.Is{{ $unionCase.Name }};
    }
        {{- end }}
        
    {{- case array.size $unionCase.Parameters }}
    {{- when 0 }}
    {{- when 1 }}
    {{- parameter = array.first $unionCase.Parameters }}
    
    public {{ parameter.Type }} Get{{ $unionCase.Name }}() {
        if (!this.Is{{ $unionCase.Name }}) {
            throw new System.InvalidOperationException($"Cannot get '{{ $unionCase.Name }}' for '{this.Case}'.");
        }
        
        return this.{{ parameter.FieldName }};
    }
    {{- else }}
    
    public ({{ $inputParameters }}) Get{{ $unionCase.Name }}() {
        if (!this.Is{{ $unionCase.Name }}) {
            throw new System.InvalidOperationException($"Cannot get '{{ $unionCase.Name }}' for '{this.Case}'.");
        }
        
        return ({{ $unionCase.Parameters | array.map "FieldName" | array.join ", " }});
    }
    {{- end }}
{{- end }}

    public TResult Switch<TResult>(
    {{-
        Cases |
        array.each @(do
            if (array.size $0.Parameters) > 0
                $parameterTypes = $0.Parameters | array.map "Type" | array.join ", "
                ret string_format "System.Func<{0}, TResult> {1}" $parameterTypes $0.Name
            else
                ret "System.Func<TResult> " + $0.Name
            end
        end) |
        array.join ", "
    -}}
    ) {
        switch (this.Case) {
            {{- for _case in Cases }}
            {{- $fieldNames = _case.Parameters | array.map "FieldName" | array.join ", " }}
            case Enum.{{ _case.Name }}: return {{ _case.Name }}({{ $fieldNames }});
            {{- end }}
            default: throw new System.ArgumentOutOfRangeException($"Invalid union case '{this.Case}'");
        }
    }

    public TResult Switch<TResult>(System.Func<{{ NameWithParameters }}, TResult> Default,
    {{-
        Cases |
        array.each @(do
            if (array.size $0.Parameters) > 0
                $parameterTypes = $0.Parameters | array.map "Type" | array.join ", "
                ret string_format "System.Func<{0}, TResult>? {1} = null" $parameterTypes $0.Name
            else
                ret string_format "System.Func<TResult>? {0} = null" $0.Name
            end
        end) |
        array.join ", "
    -}}
    ) {
        switch (this.Case) {
            {{- for _case in Cases }}
            {{- $fieldNames = _case.Parameters | array.map "FieldName" | array.join ", " }}
            case Enum.{{ _case.Name }}: return {{ _case.Name }} != null ? {{ _case.Name }}({{ $fieldNames }}) : Default(this);
            {{- end }}
            default: throw new System.ArgumentOutOfRangeException($"Invalid union case '{this.Case}'");
        }
    }

    public void Switch(
    {{-
        Cases |
        array.each @(do
            if (array.size $0.Parameters) > 0
                $parameterTypes = $0.Parameters | array.map "Type" | array.join ", "
                ret string_format "System.Action<{0}> {1}" $parameterTypes $0.Name
            else
                ret "System.Action " + $0.Name
            end
        end) |
        array.join ", "
    -}}
    ) {
        switch (this.Case) {
            {{- for _case in Cases }}
            {{- $fieldNames = _case.Parameters | array.map "FieldName" | array.join ", " }}
            case Enum.{{ _case.Name }}: {{ _case.Name }}({{ $fieldNames }}); break;
            {{- end }}
            default: throw new System.ArgumentOutOfRangeException($"Invalid union case '{this.Case}'");
        }
    }

    public void Switch(System.Action<{{ NameWithParameters }}> Default,
    {{-
        Cases |
        array.each @(do
            if (array.size $0.Parameters) > 0
                $parameterTypes = $0.Parameters | array.map "Type" | array.join ", "
                ret string_format "System.Action<{0}>? {1} = null" $parameterTypes $0.Name
            else
                ret string_format "System.Action? {0} = null" $0.Name
            end
        end) |
        array.join ", "
    -}}
    ) {
        switch (this.Case) {
            {{- for _case in Cases }}
            {{- $fieldNames = _case.Parameters | array.map "FieldName" | array.join ", " }}
            case Enum.{{ _case.Name }}: if ({{ _case.Name }} != null) { {{ _case.Name }}({{ $fieldNames }}); } else { Default(this); } break;
            {{- end }}
            default: throw new System.ArgumentOutOfRangeException($"Invalid union case '{this.Case}'");
        }
    }
    
    {{- if GenerateToString }}
    
    public override string ToString() {
        switch (this.Case) {
            {{- for _case in Cases }}
            case Enum.{{ _case.Name }}: return $"{{ _case.Name }}({{
                _case.Parameters |
                array.each @(do
                    ret string_format "{{0}}" $0.FieldName
                end) |
                array.join ", "
            }})";
            {{- end }}
            default: throw new System.ArgumentOutOfRangeException($"Invalid union case '{this.Case}'");
        }
    } 
    {{- end }}

{{- # Member declarations end }}


{{- # Braces for type declarations }}
{{- for $type in TypeDeclarations }}
}
{{- end }}


{{- # Braces for namespace declarations }}
{{- for $namespace in NamespaceDeclarations }}
    {{- if $namespace.Declaration }}
}
    {{- end }}
{{- end }}



